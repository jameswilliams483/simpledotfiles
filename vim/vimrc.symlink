" #TODO:
" - special copy ( set paste | !pbcopy | set nopaste) _medium_
"   Switch Tabs

" Important
set runtimepath+=~/.vim/plugin

" Basic Configs
" ------------------------------

"  Basics
syntax on
set showcmd   " show what's been entered so far
set nocompatible " don't respect vi defaults
set number
set ruler " line & column count on bottom right corner
set autoindent

" Set encoding
set encoding=utf-8

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab                         " use spaces, not tabs
set list listchars=tab:\ \ ,trail:Â·

" Searching
set hlsearch                          " highlight matches
set incsearch                         " Show search match while typing
set ignorecase
set smartcase                         " case sensitive if it contains one cap
set grepprg=grep\ -nH\ $*

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Status bar
set laststatus=2

" load the plugin and indent settings for the detected filetype
filetype plugin indent on

" When I close a tab, remove the buffer
set nohidden


" Automatic Comands
" -----------------
" Change to current Directory
autocmd BufEnter * execute "chdir ".escape(expand("%:p:h"), ' ')

set autoread   " watch file changes

" Remove Trailing White Space
autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif

" Restore cursor position to where it was before
augroup JumpCursorOnEdit
   au!
      autocmd BufReadPost *
          \ if expand("<afile>:p:h") !=? $TEMP |
          \   if line("'\"") > 1 && line("'\"") <= line("$") |
          \     let JumpCursorOnEdit_foo = line("'\"") |
          \     let b:doopenfold = 1 |
          \     if (foldlevel(JumpCursorOnEdit_foo) > foldlevel(JumpCursorOnEdit_foo - 1)) |
          \        let JumpCursorOnEdit_foo = JumpCursorOnEdit_foo - 1 |
          \        let b:doopenfold = 2 |
          \     endif |
          \     exe JumpCursorOnEdit_foo |
          \   endif |
          \ endif
     " Need to postpone using "zv" until after reading the modelines.
       autocmd BufWinEnter *
                   \ if exists("b:doopenfold") |
                   \   exe "normal zv" |
                   \   if(b:doopenfold > 1) |
                   \       exe  "+".1 |
                   \   endif |
                   \   unlet b:doopenfold |
                   \ endif
augroup END

" Different File Types
" --------------------
" make Python follow PEP8 ( http://www.python.org/dev/peps/pep-0008/ )
au FileType python set softtabstop=4 tabstop=4 shiftwidth=4 textwidth=79

" Include user's local vim config
" ------------------------------
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

" Custom Commands
" ------------------------------
" sudo write
ca w!! w !sudo tee >/dev/null "%"

" python compilation
ca run_py !python %
ca test_py !python -m doctest %

" Basic copy and paste functionality
" TODO: hack
function Copy()
  :w! /tmp/_cpy " Todo, this creates a conflict
  :!/usr/bin/osascript -e 'tell application "System Events"' -e 'set the clipboard to (read posix file "/tmp/_cpy" as text)' -e 'end tell'
endfunction

function Copy2()
  :!/usr/bin/osascript -e 'tell application "System Events"' -e 'set the clipboard to (read posix file "/tmp/_cpy" as text)' -e 'end tell'
endfunction

function Paste()
  :r! cat /tmp/_cpy
endfunction
" ====================================
" Etc
" TODO: check if pathogen is installed
call pathogen#infect()    " Initialize pathogen

" Close vim if NERDTree is only window left
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

